// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  phoneNo   String?
  password  String
  tokens    Token[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupMember           GroupMember[]
  expenses              Expense[]
  expenseParticipants   ExpenseParticipants[]
  sentNotifications     Notification[]        @relation("NotificationSender")
  receivedNotifications Notification[]        @relation("NotificationRecipient")
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members  GroupMember[]
  expenses GroupExpense[]
}

model GroupMember {
  id                   Int      @id @default(autoincrement())
  groupId              Int
  userId               Int
  group                Group    @relation(fields: [groupId], references: [id])
  user                 User     @relation(fields: [userId], references: [id])
  receiveNotifications Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Expense {
  id        Int      @id @default(autoincrement())
  title     String
  payerId   Int
  payer     User     @relation(fields: [payerId], references: [id])
  amount    Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attachments   ExpenseAttachment[]
  participants  ExpenseParticipants[]
  groupExpenses GroupExpense[]
  notifications Notification[]
}

model GroupExpense {
  id        Int      @id @default(autoincrement())
  expenseId Int
  groupId   Int
  expense   Expense  @relation(fields: [expenseId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id        Int      @id @default(autoincrement())
  name      String
  src       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expenseAttachment ExpenseAttachment[]
}

model ExpenseAttachment {
  id           Int        @id @default(autoincrement())
  expenseId    Int
  attachmentId Int
  expense      Expense    @relation(fields: [expenseId], references: [id])
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ExpenseParticipants {
  id         Int      @id @default(autoincrement())
  expenseId  Int
  userId     Int
  expense    Expense  @relation(fields: [expenseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  paidAmount Int      @default(0)
  owedAmount Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Notification {
  id          Int      @id @default(autoincrement())
  senderId    Int
  sender      User     @relation("NotificationSender", fields: [senderId], references: [id])
  recipientId Int
  recipient   User     @relation("NotificationRecipient", fields: [recipientId], references: [id])
  expenseId   Int?
  expense     Expense? @relation(fields: [expenseId], references: [id])
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
